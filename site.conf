-- This is an example site configuration for Gluon v2015.1+
--
-- Take a look at the documentation located at
-- http://gluon.readthedocs.org/ for details.
--
-- This configuration will not work as it. You're required to make
-- community specific changes to it!
{
  -- Used for generated hostnames, e.g. freifunk-abcdef123456. (optional)
  hostname_prefix = 'freifunk-',

  -- Name of the community.
  site_name = 'Freifunk Magdeburg',

  -- Shorthand of the community.
  site_code = 'ffmd',

  -- Prefixes used within the mesh. Both are required.
  prefix4 = '10.139.0.0/17',
  prefix6 = 'fda9:026e:5805::/64',

  -- Timezone of your community.
  -- See http://wiki.openwrt.org/doc/uci/system#time_zones
  timezone = 'CET-1CEST,M3.5.0,M10.5.0/3',

  -- List of NTP servers in your community.
  -- Must be reachable using IPv6!
  ntp_servers = {
    '1.ntp.ffmd',
    '2.ntp.ffmd',
  },

  -- Wireless regulatory domain of your community.
  regdom = 'DE',

  -- Wireless configuration for 2.4 GHz interfaces.
  wifi24 = {
    -- Wireless channel.
    channel = 1,

    -- ESSID used for client network.
    ssid = 'md.freifunk.net',

    -- Specifies the channel width in 802.11n and 802.11ac mode.
    -- Possible values are:
    -- HT20 (single 20MHz channel),
    -- HT40- (2x 20MHz channels, secondary below)
    -- HT40+ (2x 20MHz channels, secondary above)
    htmode = 'HT40+',

    -- Adjust these values!
    mesh_ssid = '02:D1:11:37:FD:45',  -- ESSID used for mesh
    mesh_bssid = '02:D1:11:37:FD:45', -- BSSID used for mesh

    -- Bitrate used for multicast/broadcast packets.
    mesh_mcast_rate = 12000,

    -- (optional) mesh VLAN on 802.11 ad-hoc interface (1-4095)
    -- mesh_vlan = 14,
    -- client_disabled = true,
    -- mesh_disabled = false,
  },

  -- Wireless configuration for 5 GHz interfaces.
  -- This should be equal to the 2.4 GHz variant, except
  -- for channel and htmode.
  wifi5 = {
    ssid = 'md.freifunk.net (5GHz)',
    channel = 44,
    htmode = 'HT20',
    mesh_ssid = '02:D1:11:37:FD:45',
    mesh_bssid = '02:D1:11:37:FD:45',
    mesh_mcast_rate = 12000,
    -- mesh_vlan = 14,
    -- client_disabled = true,
    -- mesh_disabled = false,
  },

  -- The next node feature allows clients to always reach the node it is
  -- connected to using a known IP address.
  next_node = {
    -- anycast IPs of all nodes
    ip4 = '10.139.0.1',
    ip6 = 'fda9:026e:5805::1',

    -- anycast MAC of all nodes
    mac = '16:41:95:40:f7:dc',
  },

  -- Refer to http://fastd.readthedocs.org/en/latest/ to better understand
  -- what these options do.
  fastd_mesh_vpn = {
    -- List of crypto-methods to use.
    methods = {'salsa2012+umac'},
    enabled = true,
    -- configurable = true,

    mtu = 1426,
    groups = {
      backbone = {
        -- Limit number of connected peers to reduce bandwidth.
        limit = 2,

        -- List of peers.
        peers = {
          gw1 = {
            key = '4cd9f8cafd8ee0b24378651252815ddc731d55c4db3c9644d8ee860ecc8df5d2',

            -- This is a list, so you might add multiple entries.
            remotes = {
              '"gw1.md.freifunk.net" port 10000',
              'ipv6 "2a03:4000:6:30c3::32" port 10000',
              'ipv4 "37.120.160.206" port 10000',
            },
          },
          gw2 = {
            key = '23731bc411ef17129163bfedc5ecc7f5df05d46fed0f56d92028d082704474be',
            -- You can also omit the ipv4 to allow both connection via ipv4 and ipv6
            remotes = {
              '"gw2.md.freifunk.net" port 10000',
              'ipv6 "2a01:4a0:2002:2189::64" port 10000',
              'ipv4 "130.185.109.142" port 10000',
            },
          },
        },

        -- Optional: nested peer groups
        -- groups = {
        --   backbone_sub = {
        --     ...
        --   },
        --   ...
        -- },
      },
      -- Optional: additional peer groups, possibly with other limits
      -- backbone2 = {
      --   ...
      -- },
    },
  },

  autoupdater = {
    -- Default branch. Don't forget to set GLUON_BRANCH when building!
    branch = 'stable',

    -- List of branches. You may define multiple branches.
    branches = {
      stable = {
        name = 'stable',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {'http://stable.updates.firmware.ffmd'},

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.
        good_signatures = 2,

        -- List of public keys of maintainers.
        pubkeys = {
          '84064131d410a6363071e65c0f010ae0e8c5881db77eec5f7e712fc723178799', -- Alex
          'cbbe29a6e2890e03610d47a7f42a3f9f97725800c434529914a1d00b07a83c40', -- Andreas
          '45a3694d464bf9428b839141f31ffb358b541f2718b8d9f7d57c13baa8a4f56b', -- Bastinat0r
          'be5155bac7681fb4631bdab72c47b6e606e3f0ccfe50bb8f6cd6866c1c97c729', -- Michel
        },
      },
      beta = {
        name = 'beta',
        mirrors = {'http://beta.updates.firmware.ffmd'},
        good_signatures = 2,
        pubkeys = {
          '84064131d410a6363071e65c0f010ae0e8c5881db77eec5f7e712fc723178799', -- Alex
          'cbbe29a6e2890e03610d47a7f42a3f9f97725800c434529914a1d00b07a83c40', -- Andreas
          '45a3694d464bf9428b839141f31ffb358b541f2718b8d9f7d57c13baa8a4f56b', -- Bastinat0r
          'be5155bac7681fb4631bdab72c47b6e606e3f0ccfe50bb8f6cd6866c1c97c729', -- Michel
        },
      },
      experimental = {
        name = 'experimental',
        mirrors = {'http://experimental.updates.firmware.ffmd'},
        good_signatures = 1,
        pubkeys = {
          '84064131d410a6363071e65c0f010ae0e8c5881db77eec5f7e712fc723178799', -- Alex
          'cbbe29a6e2890e03610d47a7f42a3f9f97725800c434529914a1d00b07a83c40', -- Andreas
          '45a3694d464bf9428b839141f31ffb358b541f2718b8d9f7d57c13baa8a4f56b', -- Bastinat0r
          'be5155bac7681fb4631bdab72c47b6e606e3f0ccfe50bb8f6cd6866c1c97c729', -- Michel
        },
      },
    },
  },

  -- Node roles
  -- roles = {
  --   default = 'node',
  --   list = {
  --     'node',
  --     'test',
  --     'backbone',
  --     'service',
  --   },
  -- },

  -- Bandwidth limiting
  simple_tc = {
    mesh_vpn = {
      ifname = 'mesh-vpn',

      -- You may enable it by default here.
      enabled = false,

      -- Default upload limit (kbit/s).
      limit_egress = 200,

      -- Default download limit (kbit/s).
      limit_ingress = 3000,
    },
  },

  -- Skip setup mode (config mode) on first boot
  -- setup_mode = {
  --  skip = true,
  -- },
}

-- vim: set ft=lua et sts=0 ts=2 sw=2 sr:
